In file included from [01m[K/opt/ros/jazzy/include/rclcpp/rclcpp/utilities.hpp:19[m[K,
                 from [01m[K/opt/ros/jazzy/include/rclcpp/rclcpp/logging.hpp:25[m[K,
                 from [01m[K/opt/ros/jazzy/include/rclcpp/rclcpp/copy_all_parameter_values.hpp:27[m[K,
                 from [01m[K/opt/ros/jazzy/include/rclcpp/rclcpp/rclcpp.hpp:171[m[K,
                 from [01m[K/home/ros/ros2_ws/src/turtle_save_pkg/src/turtlespawnnode.cpp:1[m[K:
/usr/include/c++/13/functional: In instantiation of â€˜[01m[Kstruct std::_Bind_check_arity<void (TurtleSpawnNode::*)(std::shared_future<std::shared_ptr<turtlesim::srv::Spawn_Response_<std::allocator<void> > > >), TurtleSpawnNode*, const std::_Placeholder<1>&, const std::_Placeholder<2>&>[m[Kâ€™:
[01m[K/usr/include/c++/13/functional:859:12:[m[K   required from â€˜[01m[Kstruct std::_Bind_helper<false, void (TurtleSpawnNode::*)(std::shared_future<std::shared_ptr<turtlesim::srv::Spawn_Response_<std::allocator<void> > > >), TurtleSpawnNode*, const std::_Placeholder<1>&, const std::_Placeholder<2>&>[m[Kâ€™
[01m[K/usr/include/c++/13/functional:881:5:[m[K   required by substitution of â€˜[01m[Ktemplate<class _Func, class ... _BoundArgs> typename std::_Bind_helper<std::__is_socketlike<_Func>::value, _Func, _BoundArgs ...>::type std::[01;32m[Kbind[m[K(_Func&&, _BoundArgs&& ...) [35m[K[with _Func = void (TurtleSpawnNode::*)(std::shared_future<std::shared_ptr<turtlesim::srv::Spawn_Response_<std::allocator<void> > > >); _BoundArgs = {TurtleSpawnNode*, const std::_Placeholder<1>&, const std::_Placeholder<2>&}][m[K[m[Kâ€™
[01m[K/home/ros/ros2_ws/src/turtle_save_pkg/src/turtlespawnnode.cpp:18:22:[m[K   required from here
[01m[K/usr/include/c++/13/functional:847:21:[m[K [01;31m[Kerror: [m[Kstatic assertion failed: Wrong number of arguments for pointer-to-member
  846 |       static_assert(_Varargs::[01;31m[Kvalue[m[K
      |                               [01;31m[K~~~~~[m[K
  847 | [01;31m[K                    ? sizeof...(_BoundArgs) >= _Arity::value + 1[m[K
      |                     [01;31m[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
  848 | [01;31m[K                    : sizeof...(_BoundArgs) == _Arity::value + 1[m[K,
      |                     [01;31m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[01m[K/usr/include/c++/13/functional:847:21:[m[K [01;36m[Knote: [m[Kâ€˜[01m[K(false ? (3 >= (((long unsigned int)std::integral_constant<long unsigned int, 1>::value) + 1)) : (3 == (((long unsigned int)std::integral_constant<long unsigned int, 1>::value) + 1)))[m[Kâ€™ evaluates to false
[01m[K/home/ros/ros2_ws/src/turtle_save_pkg/src/turtlespawnnode.cpp:[m[K In member function â€˜[01m[Kvoid TurtleSpawnNode::[01;32m[KHandleGetNextTurtleService[m[K(std::shared_ptr<example_interfaces::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<example_interfaces::srv::Trigger_Response_<std::allocator<void> > >)[m[Kâ€™:
[01m[K/home/ros/ros2_ws/src/turtle_save_pkg/src/turtlespawnnode.cpp:74:102:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Krequest[m[Kâ€™ [[01;35m[K]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wunused-parameter-Wunused-parameter]8;;[m[K]
   74 |     void HandleGetNextTurtleService([01;35m[Kconst std::shared_ptr<example_interfaces::srv::Trigger::Request> request[m[K,
      |                                     [01;35m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~[m[K
In file included from [01m[K/opt/ros/jazzy/include/rclcpp/rclcpp/service.hpp:37[m[K,
                 from [01m[K/opt/ros/jazzy/include/rclcpp/rclcpp/callback_group.hpp:28[m[K,
                 from [01m[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_executable.hpp:20[m[K,
                 from [01m[K/opt/ros/jazzy/include/rclcpp/rclcpp/memory_strategy.hpp:25[m[K,
                 from [01m[K/opt/ros/jazzy/include/rclcpp/rclcpp/memory_strategies.hpp:18[m[K,
                 from [01m[K/opt/ros/jazzy/include/rclcpp/rclcpp/executor_options.hpp:22[m[K,
                 from [01m[K/opt/ros/jazzy/include/rclcpp/rclcpp/executor.hpp:38[m[K,
                 from [01m[K/opt/ros/jazzy/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25[m[K,
                 from [01m[K/opt/ros/jazzy/include/rclcpp/rclcpp/executors.hpp:21[m[K,
                 from [01m[K/opt/ros/jazzy/include/rclcpp/rclcpp/rclcpp.hpp:172[m[K:
/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp: In instantiation of â€˜[01m[Kvoid rclcpp::AnyServiceCallback<ServiceT>::[01;32m[Kset[m[K(CallbackT&&) [35m[K[with CallbackT = std::_Bind<void (TurtleSpawnNode::*(TurtleSpawnNode*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_future<std::shared_ptr<turtlesim::srv::Spawn_Response_<std::allocator<void> > > >)>; typename std::enable_if<(! rclcpp::detail::can_be_nullptr<CallbackT>::value), int>::type <anonymous> = 0; ServiceT = example_interfaces::srv::Trigger][m[K[m[Kâ€™:
[01m[K/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:69:27:[m[K   required from â€˜[01m[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::[01;32m[Kcreate_service[m[K(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const rmw_qos_profile_t&, CallbackGroup::SharedPtr) [35m[K[with ServiceT = example_interfaces::srv::Trigger; CallbackT = std::_Bind<void (TurtleSpawnNode::*(TurtleSpawnNode*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_future<std::shared_ptr<turtlesim::srv::Spawn_Response_<std::allocator<void> > > >)>; typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<example_interfaces::srv::Trigger> >; std::string = std::__cxx11::basic_string<char>; rmw_qos_profile_t = rmw_qos_profile_s; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>][m[K[m[Kâ€™
[01m[K/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:51:45:[m[K   required from â€˜[01m[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::[01;32m[Kcreate_service[m[K(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const QoS&, CallbackGroup::SharedPtr) [35m[K[with ServiceT = example_interfaces::srv::Trigger; CallbackT = std::_Bind<void (TurtleSpawnNode::*(TurtleSpawnNode*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_future<std::shared_ptr<turtlesim::srv::Spawn_Response_<std::allocator<void> > > >)>; typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<example_interfaces::srv::Trigger> >; std::string = std::__cxx11::basic_string<char>; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>][m[K[m[Kâ€™
[01m[K/opt/ros/jazzy/include/rclcpp/rclcpp/node_impl.hpp:181:53:[m[K   required from â€˜[01m[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::Node::[01;32m[Kcreate_service[m[K(const std::string&, CallbackT&&, const rclcpp::QoS&, rclcpp::CallbackGroup::SharedPtr) [35m[K[with ServiceT = example_interfaces::srv::Trigger; CallbackT = std::_Bind<void (TurtleSpawnNode::*(TurtleSpawnNode*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_future<std::shared_ptr<turtlesim::srv::Spawn_Response_<std::allocator<void> > > >)>; typename rclcpp::Service<ServiceT>::SharedPtr = std::shared_ptr<rclcpp::Service<example_interfaces::srv::Trigger> >; std::string = std::__cxx11::basic_string<char>; rclcpp::CallbackGroup::SharedPtr = std::shared_ptr<rclcpp::CallbackGroup>][m[K[m[Kâ€™
[01m[K/home/ros/ros2_ws/src/turtle_save_pkg/src/turtlespawnnode.cpp:17:86:[m[K   required from here
[01m[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:103:17:[m[K [01;31m[Kerror: [m[Kno match for â€˜[01m[Koperator=[m[Kâ€™ (operand types are â€˜[01m[Kstd::variant<std::monostate, std::function<void(std::shared_ptr<example_interfaces::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<example_interfaces::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<example_interfaces::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<example_interfaces::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<example_interfaces::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<example_interfaces::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<example_interfaces::srv::Trigger_Request_<std::allocator<void> > >)> >[m[Kâ€™ and â€˜[01m[Kstd::_Bind<void (TurtleSpawnNode::*(TurtleSpawnNode*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_future<std::shared_ptr<turtlesim::srv::Spawn_Response_<std::allocator<void> > > >)>[m[Kâ€™)
  103 |       [01;31m[Kcallback_ = std::forward<CallbackT>(callback)[m[K;
      |       [01;31m[K~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
In file included from [01m[K/opt/ros/jazzy/include/rclcpp/rclcpp/client.hpp:29[m[K,
                 from [01m[K/opt/ros/jazzy/include/rclcpp/rclcpp/callback_group.hpp:24[m[K:
[01m[K/usr/include/c++/13/variant:1494:9:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<_Types>&> std::variant<_Types>::[01;32m[Koperator=[m[K(_Tp&&) [35m[K[with _Types = {std::monostate, std::function<void(std::shared_ptr<example_interfaces::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<example_interfaces::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<example_interfaces::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<example_interfaces::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<example_interfaces::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<example_interfaces::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<example_interfaces::srv::Trigger_Request_<std::allocator<void> > >)>}][m[K[m[Kâ€™
 1494 |         [01;36m[Koperator[m[K=(_Tp&& __rhs)
      |         [01;36m[K^~~~~~~~[m[K
[01m[K/usr/include/c++/13/variant:1494:9:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
/usr/include/c++/13/variant: In substitution of â€˜[01m[Ktemplate<class ... _Types> template<class _Tp, class> using std::variant<_Types>::__accepted_type = std::variant<_Types>::__to_type<__accepted_index<_Tp> > [35m[K[with _Tp = std::_Bind<void (TurtleSpawnNode::*(TurtleSpawnNode*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_future<std::shared_ptr<turtlesim::srv::Spawn_Response_<std::allocator<void> > > >)>&&; <template-parameter-2-2> = void; _Types = {std::monostate, std::function<void(std::shared_ptr<example_interfaces::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<example_interfaces::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<example_interfaces::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<example_interfaces::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<example_interfaces::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<example_interfaces::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<example_interfaces::srv::Trigger_Request_<std::allocator<void> > >)>}][m[K[m[Kâ€™:
[01m[K/usr/include/c++/13/variant:1490:14:[m[K   required by substitution of â€˜[01m[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<std::monostate, std::function<void(std::shared_ptr<example_interfaces::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<example_interfaces::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<example_interfaces::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<example_interfaces::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<example_interfaces::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<example_interfaces::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<example_interfaces::srv::Trigger_Request_<std::allocator<void> > >)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<std::monostate, std::function<void(std::shared_ptr<example_interfaces::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<example_interfaces::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<example_interfaces::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<example_interfaces::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<example_interfaces::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<example_interfaces::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<example_interfaces::srv::Trigger_Request_<std::allocator<void> > >)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<std::monostate, std::function<void(std::shared_ptr<example_interfaces::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<example_interfaces::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<example_interfaces::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<example_interfaces::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<example_interfaces::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<example_interfaces::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<example_interfaces::srv::Trigger_Request_<std::allocator<void> > >)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<std::monostate, std::function<void(std::shared_ptr<example_interfaces::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<example_interfaces::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<example_interfaces::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<example_interfaces::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<example_interfaces::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<example_interfaces::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<example_interfaces::srv::Trigger_Request_<std::allocator<void> > >)> >&> std::variant<std::monostate, std::function<void(std::shared_ptr<example_interfaces::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<example_interfaces::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<example_interfaces::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<example_interfaces::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<example_interfaces::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<example_interfaces::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<example_interfaces::srv::Trigger_Request_<std::allocator<void> > >)> >::[01;32m[Koperator=[m[K(_Tp&&) [35m[K[with _Tp = std::_Bind<void (TurtleSpawnNode::*(TurtleSpawnNode*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_future<std::shared_ptr<turtlesim::srv::Spawn_Response_<std::allocator<void> > > >)>][m[K[m[Kâ€™
[01m[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:103:17:[m[K   required from â€˜[01m[Kvoid rclcpp::AnyServiceCallback<ServiceT>::[01;32m[Kset[m[K(CallbackT&&) [35m[K[with CallbackT = std::_Bind<void (TurtleSpawnNode::*(TurtleSpawnNode*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_future<std::shared_ptr<turtlesim::srv::Spawn_Response_<std::allocator<void> > > >)>; typename std::enable_if<(! rclcpp::detail::can_be_nullptr<CallbackT>::value), int>::type <anonymous> = 0; ServiceT = example_interfaces::srv::Trigger][m[K[m[Kâ€™
[01m[K/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:69:27:[m[K   required from â€˜[01m[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::[01;32m[Kcreate_service[m[K(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const rmw_qos_profile_t&, CallbackGroup::SharedPtr) [35m[K[with ServiceT = example_interfaces::srv::Trigger; CallbackT = std::_Bind<void (TurtleSpawnNode::*(TurtleSpawnNode*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_future<std::shared_ptr<turtlesim::srv::Spawn_Response_<std::allocator<void> > > >)>; typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<example_interfaces::srv::Trigger> >; std::string = std::__cxx11::basic_string<char>; rmw_qos_profile_t = rmw_qos_profile_s; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>][m[K[m[Kâ€™
[01m[K/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:51:45:[m[K   required from â€˜[01m[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::[01;32m[Kcreate_service[m[K(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const QoS&, CallbackGroup::SharedPtr) [35m[K[with ServiceT = example_interfaces::srv::Trigger; CallbackT = std::_Bind<void (TurtleSpawnNode::*(TurtleSpawnNode*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_future<std::shared_ptr<turtlesim::srv::Spawn_Response_<std::allocator<void> > > >)>; typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<example_interfaces::srv::Trigger> >; std::string = std::__cxx11::basic_string<char>; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>][m[K[m[Kâ€™
[01m[K/opt/ros/jazzy/include/rclcpp/rclcpp/node_impl.hpp:181:53:[m[K   required from â€˜[01m[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::Node::[01;32m[Kcreate_service[m[K(const std::string&, CallbackT&&, const rclcpp::QoS&, rclcpp::CallbackGroup::SharedPtr) [35m[K[with ServiceT = example_interfaces::srv::Trigger; CallbackT = std::_Bind<void (TurtleSpawnNode::*(TurtleSpawnNode*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_future<std::shared_ptr<turtlesim::srv::Spawn_Response_<std::allocator<void> > > >)>; typename rclcpp::Service<ServiceT>::SharedPtr = std::shared_ptr<rclcpp::Service<example_interfaces::srv::Trigger> >; std::string = std::__cxx11::basic_string<char>; rclcpp::CallbackGroup::SharedPtr = std::shared_ptr<rclcpp::CallbackGroup>][m[K[m[Kâ€™
[01m[K/home/ros/ros2_ws/src/turtle_save_pkg/src/turtlespawnnode.cpp:17:86:[m[K   required from here
[01m[K/usr/include/c++/13/variant:1407:15:[m[K [01;31m[Kerror: [m[Kno type named â€˜[01m[Ktype[m[Kâ€™ in â€˜[01m[Kstruct std::enable_if<false, void>[m[Kâ€™
 1407 |         using [01;31m[K__accepted_type[m[K = __to_type<__accepted_index<_Tp>>;
      |               [01;31m[K^~~~~~~~~~~~~~~[m[K
/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp: In instantiation of â€˜[01m[Kvoid rclcpp::AnyServiceCallback<ServiceT>::[01;32m[Kset[m[K(CallbackT&&) [35m[K[with CallbackT = std::_Bind<void (TurtleSpawnNode::*(TurtleSpawnNode*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_future<std::shared_ptr<turtlesim::srv::Spawn_Response_<std::allocator<void> > > >)>; typename std::enable_if<(! rclcpp::detail::can_be_nullptr<CallbackT>::value), int>::type <anonymous> = 0; ServiceT = example_interfaces::srv::Trigger][m[K[m[Kâ€™:
[01m[K/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:69:27:[m[K   required from â€˜[01m[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::[01;32m[Kcreate_service[m[K(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const rmw_qos_profile_t&, CallbackGroup::SharedPtr) [35m[K[with ServiceT = example_interfaces::srv::Trigger; CallbackT = std::_Bind<void (TurtleSpawnNode::*(TurtleSpawnNode*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_future<std::shared_ptr<turtlesim::srv::Spawn_Response_<std::allocator<void> > > >)>; typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<example_interfaces::srv::Trigger> >; std::string = std::__cxx11::basic_string<char>; rmw_qos_profile_t = rmw_qos_profile_s; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>][m[K[m[Kâ€™
[01m[K/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:51:45:[m[K   required from â€˜[01m[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::[01;32m[Kcreate_service[m[K(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const QoS&, CallbackGroup::SharedPtr) [35m[K[with ServiceT = example_interfaces::srv::Trigger; CallbackT = std::_Bind<void (TurtleSpawnNode::*(TurtleSpawnNode*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_future<std::shared_ptr<turtlesim::srv::Spawn_Response_<std::allocator<void> > > >)>; typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<example_interfaces::srv::Trigger> >; std::string = std::__cxx11::basic_string<char>; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>][m[K[m[Kâ€™
[01m[K/opt/ros/jazzy/include/rclcpp/rclcpp/node_impl.hpp:181:53:[m[K   required from â€˜[01m[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::Node::[01;32m[Kcreate_service[m[K(const std::string&, CallbackT&&, const rclcpp::QoS&, rclcpp::CallbackGroup::SharedPtr) [35m[K[with ServiceT = example_interfaces::srv::Trigger; CallbackT = std::_Bind<void (TurtleSpawnNode::*(TurtleSpawnNode*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_future<std::shared_ptr<turtlesim::srv::Spawn_Response_<std::allocator<void> > > >)>; typename rclcpp::Service<ServiceT>::SharedPtr = std::shared_ptr<rclcpp::Service<example_interfaces::srv::Trigger> >; std::string = std::__cxx11::basic_string<char>; rclcpp::CallbackGroup::SharedPtr = std::shared_ptr<rclcpp::CallbackGroup>][m[K[m[Kâ€™
[01m[K/home/ros/ros2_ws/src/turtle_save_pkg/src/turtlespawnnode.cpp:17:86:[m[K   required from here
[01m[K/usr/include/c++/13/variant:1430:16:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kstd::variant<_Types>& std::variant<_Types>::[01;32m[Koperator=[m[K(const std::variant<_Types>&) [35m[K[with _Types = {std::monostate, std::function<void(std::shared_ptr<example_interfaces::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<example_interfaces::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<example_interfaces::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<example_interfaces::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<example_interfaces::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<example_interfaces::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<example_interfaces::srv::Trigger_Request_<std::allocator<void> > >)>}][m[K[m[Kâ€™
 1430 |       variant& [01;36m[Koperator[m[K=(const variant&) = default;
      |                [01;36m[K^~~~~~~~[m[K
[01m[K/usr/include/c++/13/variant:1430:26:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kstd::_Bind<void (TurtleSpawnNode::*(TurtleSpawnNode*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_future<std::shared_ptr<turtlesim::srv::Spawn_Response_<std::allocator<void> > > >)>[m[Kâ€™ to â€˜[01m[Kconst std::variant<std::monostate, std::function<void(std::shared_ptr<example_interfaces::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<example_interfaces::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<example_interfaces::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<example_interfaces::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<example_interfaces::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<example_interfaces::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<example_interfaces::srv::Trigger_Request_<std::allocator<void> > >)> >&[m[Kâ€™
 1430 |       variant& operator=([01;36m[Kconst variant&[m[K) = default;
      |                          [01;36m[K^~~~~~~~~~~~~~[m[K
[01m[K/usr/include/c++/13/variant:1431:16:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kstd::variant<_Types>& std::variant<_Types>::[01;32m[Koperator=[m[K(std::variant<_Types>&&) [35m[K[with _Types = {std::monostate, std::function<void(std::shared_ptr<example_interfaces::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<example_interfaces::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<example_interfaces::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<example_interfaces::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<example_interfaces::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<example_interfaces::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<example_interfaces::srv::Trigger_Request_<std::allocator<void> > >)>}][m[K[m[Kâ€™
 1431 |       variant& [01;36m[Koperator[m[K=(variant&&) = default;
      |                [01;36m[K^~~~~~~~[m[K
[01m[K/usr/include/c++/13/variant:1431:26:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kstd::_Bind<void (TurtleSpawnNode::*(TurtleSpawnNode*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_future<std::shared_ptr<turtlesim::srv::Spawn_Response_<std::allocator<void> > > >)>[m[Kâ€™ to â€˜[01m[Kstd::variant<std::monostate, std::function<void(std::shared_ptr<example_interfaces::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<example_interfaces::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<example_interfaces::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<example_interfaces::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<example_interfaces::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<example_interfaces::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<example_interfaces::srv::Trigger_Request_<std::allocator<void> > >)> >&&[m[Kâ€™
 1431 |       variant& operator=([01;36m[Kvariant&&[m[K) = default;
      |                          [01;36m[K^~~~~~~~~[m[K
gmake[2]: *** [CMakeFiles/turtlespawn_node.dir/build.make:76: CMakeFiles/turtlespawn_node.dir/src/turtlespawnnode.cpp.o] Error 1
gmake[1]: *** [CMakeFiles/Makefile2:137: CMakeFiles/turtlespawn_node.dir/all] Error 2
gmake: *** [Makefile:146: all] Error 2
